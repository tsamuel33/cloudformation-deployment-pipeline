---
AWSTemplateFormatVersion: 2010-09-09
Description: Example YAML template to test deployment

Parameters:
  RandomParameter:
    Type: String
    Description: Doesn't actually do anything
    Default: "default"
  IngressProtocol:
    Type: Number
    Description: Protocol Number
    Default: 6
  Prefix:
    Type: String
    Description: Prefix for security group name
    Default: "Travis"
  # DefaultParameter:
  #   Type: String
  #   Description: Doesn't actually do anything
  #   Default: "default2"
  # NoDefaultParameter:
  #   Type: String
  #   Description: Doesn't actually do anything
  AppEnvironment:
    Type: 'String'
    AllowedValues:
    - dev
    - test
    - staging
    - prod
    Default: dev
  VpcId:
    Type: String
    Description: ID of VPC to launch security group in

Mappings:
  ExampleMap:
    Level1:
      Value: hello

Conditions:
  EqualsExample: !Equals [ !Ref RandomParameter, "non-default" ]
  NotConditionExample: !Not [!Condition EqualsExample]
  OrExample: !Or [!Condition EqualsExample, !Equals [!Ref IngressProtocol, "-1"]]
  AndExample: !And [!Condition EqualsExample, !Equals [!Ref IngressProtocol, "-1"]]
  isDev: !Equals [!Ref 'AppEnvironment', 'dev']
  isTest: !Equals [!Ref 'AppEnvironment', 'test']
  isProd: !Equals [!Ref 'AppEnvironment', 'prod']

Resources:
  # WaitConditionHandler:
  #   Type: 'AWS::CloudFormation::WaitConditionHandle'
  #   Properties: {}

  CloudFormationReadOnlyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: TravisCFReadOnly
      Description: Cloud Formation Read-Only Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:saml-provider/provider'
            Action: 'sts:AssumeRoleWithSAML'
            Condition:
              StringEquals:
                'SAML:aud': 'https://signin.aws.amazon.com/saml'
      Tags:
        - Key: "ExtraKey"
          Value: "ExtraValue"

  # # InternetGateway:
  # #   Type: AWS::EC2::InternetGateway
  # #   Properties:
  # #     Tags:
  # #       - Key: Name
  # #         Value: !Sub ${ManagedResourcePrefix}-InternetGateway
  # #       - Key: Network
  # #         Value: Public

  # PublicSubnetRoute:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: rtb-aldkjfalkdfjla
  #     DestinationCidrBlock: 0.0.0.0/0
  #     GatewayId: !Ref RandomParameter

  DefaultSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VpcId
      GroupName: !Sub
        - ${Alt}DefaultSecurityGroup-${Suffix}-${NoSub}
        - Alt: !Ref Prefix
          Suffix:
            Ref: RandomParameter
          NoSub: !GetAtt CloudFormationReadOnlyRole.Arn
      GroupDescription: !Sub "${Prefix} test of the sub function in ${AWS::Region}"
      SecurityGroupIngress: []
      SecurityGroupEgress: []
      Tags:
      - Key: "secops:tags:managed_by"
        Value: "AWS Managed Security Pipeline"
  AllowOutboundTrafficToLoopback:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref DefaultSecurityGroup
      CidrIp: 10.0.0.0/8
      IpProtocol: -1
      Description: 'Allow outbound traffic to Loopback address only'
  AllowInboundTrafficFromLoopback:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref DefaultSecurityGroup
      IpProtocol: !Ref IngressProtocol
      CidrIp: 0.0.0.0/0
      FromPort: 443
      ToPort: 443
      Description: 'Allow inbound traffic from Loopback address only'

Outputs:
  SplitSelectExample:
    Value: !Select [0, !Split [ ',', "first,second,third" ]]
  JoinExample:
    Value: !Join [ "::", [AWS, Region]]
  GetAZsExample:
    Value: !Select [0, { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]
  GetAttExample:
    Value: !GetAtt DefaultSecurityGroup.GroupId
  FindInMapExample:
    Value: !FindInMap [ExampleMap, Level1, Value]
  CidrExample:
    Value: !Select [0, !Cidr ["10.1.0.0/16", 3, 8]]
  Base64Example:
    Value: !Base64 hello
  IfExample:
    Value: !If [EqualsExample, !Ref RandomParameter, !Ref AWS::NoValue]