---
AWSTemplateFormatVersion: 2010-09-09
Description: Example YAML template to test deployment

Parameters:
  RoleName:
    Type: String
    Description: Name of the Read Only role
    Default: TBD
  SAMLProviderName:
    Type: String
    Description: Name of the IAM SAML Provider
    Default: TBD
  SGCidr:
    Type: String
    Description: CIDR that will be opened up on security group
  Suffix:
    Type: String
    Description: Suffix for security group test
  IngressProtocol:
    Type: Number
    Description: Protocol Number
    Default: 6
  Prefix:
    Type: String
    Description: Prefix for security group name

Mappings:
  ExampleMap:
    Level1:
      Value: hello

Conditions:
  RoleNameProvided: !Not [ !Equals [!Ref RoleName, "TBD"]]
  SAMLNameProvided: !Not [ !Equals [!Ref SAMLProviderName, "TBD"]]
  DeployRole: !And [!Condition RoleNameProvided, !Condition SAMLNameProvided]
  OrExample: !Or [!Condition RoleNameProvided, !Condition SAMLNameProvided]
  AllTraffic: !Equals [!Ref IngressProtocol, -1]

Resources:
  CloudFormationReadOnlyRole:
    Condition: DeployRole
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref RoleName
      Path: /example/
      Description: Cloud Formation Read-Only Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:saml-provider/${SAMLProviderName}'
            Action: 'sts:AssumeRoleWithSAML'
            Condition:
              StringEquals:
                'SAML:aud': 'https://signin.aws.amazon.com/saml'
      Tags:
        - Key: "Greeting"
          Value: !FindInMap [ExampleMap, Level1, Value]
        - Key: "EncodedTag"
          Value: !Base64 IAmEncoded
        - Key: "secops:tags:managed_by"
          Value: 'AWS Managed Security Pipeline'

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref SGCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true

  DefaultSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub
        - ${Alt}-DefaultSecurityGroup-${Ending}
        - Alt: !Ref Prefix
          Ending:
            Ref: Suffix
      GroupDescription: "Test deployment via GitHub Actions"
      SecurityGroupIngress: []
      SecurityGroupEgress: []
      Tags:
      - Key: "secops:tags:managed_by"
        Value: "AWS Managed Security Pipeline"
  AllowOutboundTrafficToLoopback:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref DefaultSecurityGroup
      CidrIp: !Ref SGCidr
      IpProtocol: !Ref IngressProtocol
      FromPort: !If [AllTraffic, !Ref AWS::NoValue, 443]
      ToPort: !If [AllTraffic, !Ref AWS::NoValue, 443]
      Description: 'Allow outbound traffic to Loopback address only'
  AllowInboundTrafficFromLoopback:
    Condition: OrExample
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt DefaultSecurityGroup.GroupId
      IpProtocol: !Ref IngressProtocol
      CidrIp: !Select [0, !Cidr [!Ref SGCidr, 3, 8]]
      FromPort: !If [AllTraffic, !Ref AWS::NoValue, 443]
      ToPort: !If [AllTraffic, !Ref AWS::NoValue, 443]
      Description: 'Allow inbound traffic from Loopback address only'

Outputs:
  SplitSelectExample:
    Value: !Select [0, !Split [ ',', "first,second,third" ]]
  JoinExample:
    Value: !Join [ ".", [Join, Example, Output]]