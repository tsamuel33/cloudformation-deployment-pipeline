name: Test and Deploy CloudFormation Templates
on:
  push:
    # paths:
    #   - 'deployments/**'

permissions:
      id-token: write
      contents: write

jobs:
  SetUp:
    uses: tsamuel33/cloudformation-deployment-action/.github/workflows/get_settings.yaml@feature/local-testing
    with:
      config_file_path: config
  # Lint:
  #   needs: SetUp
  #   uses: tsamuel33/cloudformation-deployment-action/.github/workflows/test_and_deploy.yaml@feature/local-testing
  #   with:
  #     job_type: lint
  #     aws_partition: aws
  #     branch_type: ${{ needs.SetUp.outputs.branch_type }}
  #     github_secret_type: ${{ needs.SetUp.outputs.github_secret_type }}
  #     policy_as_code_provider: ${{ needs.SetUp.outputs.policy_as_code_provider }}
  #     account_secret_name: ${{ needs.SetUp.outputs.account_secret_name }}
  #     environment: ${{ needs.SetUp.outputs.environment }}
  #     assumed_role_name: ${{ needs.SetUp.outputs.assumed_role_name }}
  #     config_file_path: config
  #     deployment_folder_path: deployments
  # Validate:
  #   needs: [SetUp, Lint]
  #   uses: tsamuel33/cloudformation-deployment-action/.github/workflows/test_and_deploy.yaml@feature/local-testing
  #   with:
  #     job_type: validate
  #     aws_partition: aws
  #     branch_type: ${{ needs.SetUp.outputs.branch_type }}
  #     github_secret_type: ${{ needs.SetUp.outputs.github_secret_type }}
  #     policy_as_code_provider: ${{ needs.SetUp.outputs.policy_as_code_provider }}
  #     account_secret_name: ${{ needs.SetUp.outputs.account_secret_name }}
  #     environment: ${{ needs.SetUp.outputs.environment }}
  #     assumed_role_name: ${{ needs.SetUp.outputs.assumed_role_name }}
  #     config_file_path: config
  #     deployment_folder_path: deployments
  #     rules_repo: tsamuel33/cloudformation-deployment-action
  #     rules_folder_path: rules/cfn-guard
  #   secrets:
  #     ACCOUNT_NUMBER: ${{ secrets[needs.SetUp.outputs.account_secret_name] }}
  # Test:
  #   runs-on: ubuntu-latest
  #   needs: SetConfigVariables
  #   environment: ${{ needs.SetConfigVariables.outputs.github_secret_type == 'environment' && needs.SetConfigVariables.outputs.environment || null }}
  #   env:
  #     SECRET_NAME: ${{ needs.SetConfigVariables.outputs.account_secret_name }}
  #     RUST_BACKTRACE: full
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Install Linting Dependencies
  #       run: |
  #         echo "Installing cfn-lint, GitPython, and jsonpath-ng via pip..."
  #         pip install cfn-lint GitPython jsonpath-ng --quiet
  #     - name: Lint Templates
  #       run: python -m scripts.deploy --branch ${{ github.ref_name }} --job lint
  #     - name: Install cfn-guard
  #       if: needs.SetConfigVariables.outputs.policy_as_code_provider == 'guard'
  #       run: |
  #         curl --proto ''=https'' --tlsv1.2 -sSf https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/install-guard.sh | sh
  #         GUARD_DIR=~/.guard/bin
  #         echo $GUARD_DIR >> $GITHUB_PATH
  #     - name: Install Open Policy Agent
  #       if: needs.SetConfigVariables.outputs.policy_as_code_provider == 'opa'
  #       run: |
  #         curl -L -o opa https://openpolicyagent.org/downloads/v0.55.0/opa_linux_amd64_static
  #         chmod 755 ./opa
  #     - name: Configure AWS credentials
  #       if: needs.SetConfigVariables.outputs.policy_as_code_provider != 'None' && needs.SetConfigVariables.outputs.branch_type == 'major'
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         role-to-assume: arn:aws:iam::${{ secrets[env.SECRET_NAME] }}:role/${{ env.ASSUMED_ROLE_NAME }}
  #         role-session-name: GASession
  #         aws-region: ${{ env.AWS_REGION }}
  #       env:
  #         AWS_REGION : "us-east-1"
  #         SECRET_NAME: ${{ needs.SetConfigVariables.outputs.account_secret_name }}
  #         ASSUMED_ROLE_NAME: ${{ needs.SetConfigVariables.outputs.assumed_role_name }}
  #     - name: Policy as Code Validation
  #       if: needs.SetConfigVariables.outputs.policy_as_code_provider != 'None'
  #       run: python -m scripts.deploy --branch ${{ github.ref_name }} --account_number ${{ needs.SetConfigVariables.outputs.branch_type == 'major' && secrets[env.SECRET_NAME] || '123456789012' }} --job validate
  # Deploy:
  #   runs-on: ubuntu-latest
  #   needs: [SetConfigVariables, Test]
  #   if: needs.SetConfigVariables.outputs.branch_type == 'major'
  #   environment: ${{ needs.SetConfigVariables.outputs.github_secret_type == 'environment' && needs.SetConfigVariables.outputs.environment || null }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Install Deployment Dependencies
  #       run: |
  #         echo "Installing boto3, GitPython, and jsonpath-ng via pip..."
  #         pip install boto3 GitPython jsonpath-ng --quiet
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         role-to-assume: arn:aws:iam::${{ secrets[env.SECRET_NAME] }}:role/${{ env.ASSUMED_ROLE_NAME }}
  #         role-session-name: GASession
  #         aws-region: ${{ env.AWS_REGION }}
  #       env:
  #         AWS_REGION : "us-east-1"
  #         SECRET_NAME: ${{ needs.SetConfigVariables.outputs.account_secret_name }}
  #         ASSUMED_ROLE_NAME: ${{ needs.SetConfigVariables.outputs.assumed_role_name }}
  #     - name: Deploy Templates
  #       env:
  #         SECRET_NAME: ${{ needs.SetConfigVariables.outputs.account_secret_name }}
  #       run: |
  #         RESULT=$(python -m scripts.deploy --branch ${{ github.ref_name }} --account_number ${{ secrets[env.SECRET_NAME] }} --job deploy)
  #         if [ $RESULT -ne 0 ]; then
  #           echo "ERROR: See logs for details."
  #           exit $RESULT
  #         fi